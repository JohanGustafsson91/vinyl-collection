import { useCallback, useEffect, useState } from "react";
import { COLLECTION_ALBUMS, connectToDatabase } from "database";
import { InferGetStaticPropsType } from "next";
import Head from "next/head";
import styled from "styled-components";
import { breakpoint, breakpointSize, fontSize, space } from "theme";

import { Album } from "components/Album";
import { Filter, FilterOptions } from "components/Filter";
import type { FormattedAlbum } from "shared/FormattedAlbum";
import { catchChainedError } from "shared/handleErrors";
import type { RawReleaseWithMasterData } from "shared/Release";

export default function Home({
  albums,
}: InferGetStaticPropsType<typeof getStaticProps>) {
  const [filteredAlbums, setFilteredAlbums] = useState(albums);

  useEffect(
    function updateFilteredAlbums() {
      albums.length && setFilteredAlbums(albums);
    },
    [albums]
  );

  const memoizedHandleFilterAlbums = useCallback(
    function handleFilterAlbum({ query, includeTrack }: FilterOptions) {
      if (query === "") {
        return setFilteredAlbums(albums);
      }

      const albumsFiltered = albums.filter(function filterAlbum(album) {
        const matchArtist = album.artist
          .toLowerCase()
          .includes(query.toLowerCase());

        const matchTitle = album.title
          .toLowerCase()
          .includes(query.toLowerCase());

        const matchTrack = includeTrack
          ? album.tracks.some(function textIncludesString(track) {
              return track.title.toLowerCase().includes(query.toLowerCase());
            })
          : false;

        return [matchArtist, matchTitle, matchTrack].some(Boolean);
      });

      return setFilteredAlbums(albumsFiltered);
    },
    [albums]
  );

  return (
    <Page>
      <Head>
        <title>Vinyl Collection</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Menu>
        <MenuContent>
          <Logo>Vinyl Collection</Logo>
          <Filter onFilter={memoizedHandleFilterAlbums} />
        </MenuContent>
      </Menu>

      <Content>
        <Container>
          {filteredAlbums.map((album, i) => (
            <div key={album.id} style={{ placeSelf: "center" }}>
              <Album album={album} />
              {i % 2 === 0 ? <Shelf /> : null}
            </div>
          ))}
        </Container>
      </Content>
    </Page>
  );
}

export async function getStaticProps() {
  const connection = await connectToDatabase().catch(
    catchChainedError("Could not connect to database")
  );

  if (connection instanceof Error) {
    return {
      notFound: true,
    };
  }

  const unformattedAlbums = await connection.db
    .collection<RawReleaseWithMasterData>(COLLECTION_ALBUMS)
    .find({})
    .toArray()
    .catch(catchChainedError("Could not get collections from database"));

  if (unformattedAlbums instanceof Error) {
    return {
      notFound: true,
    };
  }

  return {
    props: {
      albums: formatAlbums(unformattedAlbums),
    },
  };
}

function formatAlbums(raw: readonly RawReleaseWithMasterData[]) {
  const formattedAllbums: readonly FormattedAlbum[] = raw.map(
    function formatAlbum(release) {
      const { basic_information, masterData } = release;

      return {
        id: release.id,
        artist: basic_information.artists[0].name,
        title: basic_information.title,
        printedYear: basic_information.year,
        releasedYear: masterData?.year ?? null,
        thumbnail: basic_information.thumb,
        coverImage: basic_information.cover_image,
        format: basic_information.formats[0].name,
        numberOfDiscs: basic_information.formats[0].qty,
        label: basic_information.labels[0].name,
        labelCategoryNumber: basic_information.labels[0].catno,
        genres: basic_information.genres,
        tracks:
          masterData?.tracklist?.map(function mapTrack(track) {
            return {
              title: track.title,
              position: track.position,
              duration: track.duration,
            };
          }) ?? [],
        videos:
          masterData?.videos?.map(function mapVideoData(video) {
            return {
              url: video.uri,
              title: video.title,
            };
          }) ?? [],
      };
    }
  );

  return [
    function sortByTitle(
      ...[a, b]: readonly [a: FormattedAlbum, b: FormattedAlbum]
    ) {
      const [titleA, titleB] = [a.title, b.title].map(simplifyArtistName);
      return titleB.localeCompare(titleA);
    },
    function sortByReleaseYear(
      ...[a, b]: readonly [a: FormattedAlbum, b: FormattedAlbum]
    ) {
      return (a.releasedYear || 0) - (b.releasedYear || 0);
    },
    function sortByArtist(
      ...[a, b]: readonly [a: FormattedAlbum, b: FormattedAlbum]
    ) {
      const [nameA, nameB] = [a.artist, b.artist].map(simplifyArtistName);
      return nameA < nameB ? -1 : nameA > nameB ? 1 : 0;
    },
  ].reduce((list, compareFn) => [...list].sort(compareFn), formattedAllbums);
}

function simplifyArtistName(name: string) {
  return name.toUpperCase().replace("THE", "").trim();
}

const Page = styled.div`
  background-color: var(--color-content);

  ${breakpoint("max-width")} {
    background-color: var(--color-background);
    padding: ${space(5)} 0 0 0;
  }
`;

const Menu = styled.div`
  width: 100%;
  position: sticky;
  top: 0;
  z-index: var(--zIndex-menu);
  background-color: var(--color-background);
`;

const MenuContent = styled.div`
  width: 100%;
  max-width: ${breakpointSize("max-width")};
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  margin: 0 auto;
  padding: ${space(3)} ${space(3)};
  background-color: var(--color-content);

  ${breakpoint(0)} {
    flex-direction: row;
    padding: ${space(4)} ${space(5)};
    align-items: center;
  }

  ${breakpoint("max-width")} {
    border-top-left-radius: ${space(4)};
    border-top-right-radius: ${space(4)};
  }
`;

const Logo = styled.span`
  font-weight: 700;
  font-size: ${fontSize(3)};
  text-transform: uppercase;
  margin-bottom: ${space(3)};

  ${breakpoint(0)} {
    margin-bottom: 0;
  }
`;

const Content = styled.div`
  position: relative;
  overflow: hidden;
  height: 100%;
  width: 100%;
`;

const Container = styled.div`
  position: relative;
  width: 100%;
  max-width: ${breakpointSize("max-width")};
  background-color: var(--color-content);
  display: grid;
  grid-template-columns: 1fr 1fr;
  row-gap: ${space(5)};
  right: -${fontSize(6)};
  padding: ${space(3)} ${fontSize(6)} ${space(5)} 0;
  align-content: flex-start;
  min-height: calc(100vh - 126px);

  ${breakpoint("max-width")} {
    margin: 0 auto;
    padding-top: ${space(5)};
    grid-template-columns: 1fr 1fr 1fr 1fr;
    right: 0;
    padding: ${space(5)} ${space(4)} ${space(6)} ${space(4)};
    min-height: calc(100vh - 175px);
  }
`;

const Shelf = styled.div`
  position: absolute;
  top: inherit;
  border-bottom: ${fontSize(4)} solid #eae1d4;
  border-left: ${space(4)} solid transparent;
  border-right: ${space(4)} solid transparent;
  margin-top: -${space(2)};
  left: -${space(4)};
  width: calc(100% + ${space(5)});
  z-index: var(--zIndex-shelf);

  &:after {
    content: "";
    background: var(--color-shelf-border);
    height: ${space(2)};
    width: calc(100% + ${space(5)});
    position: absolute;
    top: ${fontSize(4)};
    left: -${space(4)};
    right: 0;
    z-index: var(--zIndex-shelf-border);
    margin: 0;
    box-shadow: rgba(0, 0, 0, 0.7) 0px 10px 30px;

    ${breakpoint(0)} {
      height: ${fontSize(0)};
    }
  }
`;
